# -*- coding: utf-8 -*-
"""Final Copy Web Project 2 Ethan Pruzhansky

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1veMbAOMTcL4PpefovUdgbTXeTSYWgOjS
"""

#Ethan Pruzhansky
#import libraries

from bs4 import BeautifulSoup
import requests
import pandas as pd
import re

import os
print(os.popen("curl https://www.hockey-reference.com/leaders/points_career.html#").read())

base_url = 'https://www.hockey-reference.com'

# Get the page with the list of players
page = requests.get(base_url + '/leaders/points_career.html')
soup = BeautifulSoup(page.content, 'html.parser')

div_container = soup.find('div', id='div_stats_career_NHL')

# Now find the table within this div
table = div_container.find('table')

# A regular expression pattern for player URLs
player_link_pattern = re.compile(r'/players/\w/\w+\.html')

# Find all the links in the document
player_links = soup.find_all('a', href=player_link_pattern)

# Extract the href attribute (URL path) for each player link
player_urls = [base_url + link['href'] for link in player_links if 'href' in link.attrs]


df_player_urls = pd.DataFrame(player_urls, columns=['Player URL'])

df_player_urls.head(250)

import time

all_players_stats = pd.DataFrame()

# Iterate over each player URL
for url in df_player_urls['Player URL'].head(251):  # Adjust the number as needed
    print(f"Processing URL: {url}")
    response = requests.get(url)

    # Check if the request was successful
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')
        player_stats = {}

        # Extract data from div with class 'p1'
        stats_div_p1 = soup.find('div', class_='p1')
        if stats_div_p1:
            for stat_div in stats_div_p1.find_all('div', recursive=False):
                stat_name = stat_div.find('strong').text
                p_tags = stat_div.find_all('p')
                # Use the second <p> tag if it exists; otherwise, use the first
                stat_value = p_tags[1].text if len(p_tags) > 1 else p_tags[0].text
                player_stats[stat_name] = stat_value

        # Extract data from div with class 'p2'
        stats_div_p2 = soup.find('div', class_='p2')
        if stats_div_p2:
            for stat_div in stats_div_p2.find_all('div', recursive=False):
                stat_name = stat_div.find('strong').text
                p_tags = stat_div.find_all('p')
                # Use the second <p> tag if it exists; otherwise, use the first
                stat_value = p_tags[1].text if len(p_tags) > 1 else p_tags[0].text
                player_stats[stat_name] = stat_value

        # Add the player URL for reference
        player_stats['Player URL'] = url

        # Append the stats to the DataFrame
        all_players_stats = pd.concat([all_players_stats, pd.DataFrame([player_stats])], ignore_index=True)


    # Wait for 3 seconds before making the next request
    time.sleep(3)

all_players_stats

# Gets the HTML content of the website
url = requests.get ('https://www.hockey-reference.com/leaders/points_career.html#')

# Puts it in page
page = url.content

# Parse the HTML content
soup = BeautifulSoup(page , "html.parser")

# Locating Table
Hoc_Table = soup.find('div', attrs = {'class': 'content_grid'} , )

# Displaying Table Contetns
Hoc_Table

# Finding the table
content = Hoc_Table.find('table', class_='suppress_glossary suppress_csv sortable stats_table', id='stats_career_NHL').text

# Printing the Table
content

# Use regular expressions to find table
pattern = re.compile(r'(\d+\.)?([^\n\xa0]+)\n(\d{4}-\d{2})\s*(\d+)')

matches = re.findall(pattern, content)

# Prints content of the table
matches

import numpy as np


columns = ['Rank', 'Player', 'Years', 'PTS']

# Create the DataFrame
df = pd.DataFrame(matches, columns=columns)

# Convert 'Rank' to integers where possible
df['Rank'] = df['Rank'].str.replace('.', '', regex=False).replace('', np.nan).astype(float)

# Fill in missing ranks
last_rank = 0
for i in range(len(df)):
    if pd.isna(df.at[i, 'Rank']):
        last_rank += 1
        df.at[i, 'Rank'] = last_rank
    else:
        last_rank = df.at[i, 'Rank']

# Convert 'Rank' back to integer
df['Rank'] = df['Rank'].astype(int)

# Convert 'PTS' to integers
df['PTS'] = df['PTS'].astype(int)

# Clean up the 'Player' column
df['Player'] = df['Player'].str.replace('*', '').str.strip()

# Display the DataFrame
df

#Combining all the tables
combined_df = pd.concat([df, all_players_stats], axis=1)

combined_df

# Rename columns
combined_df.columns = [f'{col}_{idx}' if col == 'PTS' else col for idx, col in enumerate(combined_df.columns)]
# Drop the renamed second 'PTS' column
combined_df_cleaned = combined_df.drop('PTS_7', axis=1)
# Revert the column names to original
combined_df_cleaned.columns = [col.split('_')[0] if 'PTS' in col else col for col in combined_df_cleaned.columns]

combined_df_cleaned

from google.colab import files
import io

# Upload file
uploaded = files.upload()

file_name = next(iter(uploaded))

import pandas as pd
import io
from google.colab import files


# Read the uploaded CSV file into a DataFrame
csv_data = pd.read_csv(io.BytesIO(uploaded[file_name]))

# Convert necessary columns to numeric for calculations
csv_data[['PTS', 'GP', 'G', 'A']] = csv_data[['PTS', 'GP', 'G', 'A']].apply(pd.to_numeric)

# Calculating Years Played
csv_data['Years'] = csv_data['Years'].astype(str)
csv_data['YRS PL'] = csv_data['Years'].apply(lambda x: int(x.split('-')[1]) - int(x.split('-')[0]))

# Calculating Games per Year, Points per Game, Goals per Game, Assists per Game
csv_data['GM/YR'] = csv_data['GP'] / csv_data['YRS PL']
csv_data['PTS/GM'] = csv_data['PTS'] / csv_data['GP']
csv_data['GLS/GM'] = csv_data['G'] / csv_data['GP']
csv_data['AST/GM'] = csv_data['A'] / csv_data['GP']

# Calculating the ratio of GM/YR by PTS/GM for each player
csv_data['Correlation Games to Points'] = csv_data['GM/YR'] / csv_data['PTS/GM']

# Rounding the calculated columns to the nearest hundredth
csv_data[['GM/YR', 'PTS/GM', 'GLS/GM', 'AST/GM', 'Correlation Games to Points']] = csv_data[['GM/YR', 'PTS/GM', 'GLS/GM', 'AST/GM', 'Correlation Games to Points']].round(2)

# The final DataFrame with all calculated columns
final_dataframe = csv_data[['Rank', 'Player', 'YRS PL', 'GM/YR', 'PTS/GM', 'GLS/GM', 'AST/GM', 'Correlation Games to Points']]

final_dataframe

import matplotlib.pyplot as plt

bottom_10_players = final_dataframe.nsmallest(100, 'Correlation Games to Points')

# Plotting the data with a secondary y-axis for Points per Game (PTS/GM)
fig, ax1 = plt.subplots(figsize=(16, 8))



# Plot Games per Year (GM/YR) and Correlation of Games to Points on the primary y-axis
ax1.plot(bottom_10_players['Player'], bottom_10_players['GM/YR'], marker='o', label='Games per Year (GM/YR)', color='C0')
ax1.plot(bottom_10_players['Player'], bottom_10_players['Correlation Games to Points'], marker='o', label='Correlation of Games to Points', color='C1')

# Create a secondary y-axis for Points per Game (PTS/GM)
ax2 = ax1.twinx()
ax2.plot(bottom_10_players['Player'], bottom_10_players['PTS/GM'], marker='o', label='Points per Game (PTS/GM)', color='C2')

# Set the chart title and labels
ax1.set_title('Top 100  - Performance Metrics Comparison')
ax1.set_xlabel('Players')
ax1.set_ylabel('Games per Year / Correlation')
ax2.set_ylabel('Points per Game', color='C2')

# Set the legend for both y-axes
ax1.legend(loc='upper left')
ax2.legend(loc='upper right')

# Rotate the player names for better readability
ax1.set_xticklabels(bottom_10_players['Player'], rotation=90)

# Show the plot

ax1.set_ylim([20, 90])
ax2.set_ylim([0, 3])
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

bottom_10_players = final_dataframe.nlargest(100, 'Correlation Games to Points')

# Plotting the data with a secondary y-axis for Points per Game (PTS/GM)
fig, ax1 = plt.subplots(figsize=(16, 8))



# Plot Games per Year (GM/YR) and Correlation of Games to Points on the primary y-axis
ax1.plot(bottom_10_players['Player'], bottom_10_players['GM/YR'], marker='o', label='Games per Year (GM/YR)', color='C0')
ax1.plot(bottom_10_players['Player'], bottom_10_players['Correlation Games to Points'], marker='o', label='Correlation of Games to Points', color='C1')

# Create a secondary y-axis for Points per Game (PTS/GM)
ax2 = ax1.twinx()
ax2.plot(bottom_10_players['Player'], bottom_10_players['PTS/GM'], marker='o', label='Points per Game (PTS/GM)', color='C2')

# Set the chart title and labels
ax1.set_title('Bottom 100 Players - Performance Metrics Comparison')
ax1.set_xlabel('Players')
ax1.set_ylabel('Games per Year / Correlation')
ax2.set_ylabel('Points per Game', color='C2')

# Set the legend for both y-axes
ax1.legend(loc='upper left')
ax2.legend(loc='upper right')

# Rotate the player names for better readability
ax1.set_xticklabels(bottom_10_players['Player'], rotation=90)

# Show the plot

ax1.set_ylim([20, 160])
ax2.set_ylim([0, 3])
plt.tight_layout()
plt.show()